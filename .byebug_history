exit
kdaff
values
keys
exit
match_data.length
match_data.captures
match_data.names
exit
match_data.captures
match_data.to_a
match_data.names
match_data
exit
exi
exit
match_data.to_a
match_data
match_data.captures
match_data.names
match_data[2]
match_data[1]
match_data[0]
inspect proc
proc
&proc
proc
exit
name
c
self.class_name
c
router.send name
router.send
router.send name
router.send nae
n
c
n
s
n
self.class
n
c
exit
self##name
self#
self#name
self::name
self.class.name
self.class.class
self.name
self.class
self
self.name
c
self.class.name
exit
self.class.name
name
req.path
params
req.params
req.scheme
req.env
env
req.env
req.base_url
req.content_type
req.body
req.fullpath
req.media_type
req.media_type_params
req.params
req.path
req.path_info
req.query_string
req.url
req.script_name
Rack::Request.attributes
Rack::Request.methods
Rack::Request
req
req.action_method
req.action
req.path
req.pattern
params
req
c
s
http_method
s
name
router
n
router
n
s
controller
n
params
n
res
n
req
n
s
req.request_method.downcase.to_sym
res
req
c
exit
req.request_method
ControllerBase.new(req, res, {})
c
req.requset_method
req.path
req
req.env["rack-input"]
req.env
req.path
req
ControllerBase.new
ControllerBase
exit
routes.pattern
routes
req.path
c
req.request_method
c
req.request_method
c
req.request_method
req
req.request_method.downcase.to_sym
c
routes[0]
req.request_method.downcase.to_sym
routes
c
route.empty?
route
n
m
route
c
exit
req.request_method.downcase.to_sym
req.request_method
req.path
req
exit
eit
req.env
req
c
n
req
exit
Router.class
Router
Route
Router.routes
@routes
routes
s
http_method
s
http_method
n
http_method
n
@routes
routes
n
http_method
n
http_method
exit
routes.inspect
inspect(routes)
inspect routes
routes.all
jroutes.all
routes
route
c
pattern =~ req.path
req.path
pattern
exit
xit
res.set_cookie
res.to_json.set_cookie
res.to_json
c
cookie
c
@cookie[key]
c
cookie.to_json
cookie
exit
req.cookies["_rails_lite_app"]
req.cookies
req.get_cookie
req.cookie
req.env
req[cookie_hash]
req["_rails_lite_app"]
req
req.env[rack.request.cookie_hash]
req.env.rack.request.cookie_hash
req.env
req
req[_rails_lite_app]
req[_railsa hash
c
exit
req
c
exit
output_text = ERB.new("<%= output_file %>").result(binding)
n
c
File.read(template_file)
n
exit
File.read(template_file)
File.read('template_file')
File.read(template_file)
n
c
self.class.name.underscore
self.class.name.underscare
self.class.name
c
exit
res.body << content
res.bod << content
res.body
res['body']
res.body
c
exit
cc
c
res.body = content
content
res.body
c
res.body = content
res.body = "content"
res.body = a
